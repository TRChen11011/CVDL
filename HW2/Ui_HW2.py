# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'a:\G1\CV\HW2_P76121631__V1\HW2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap,QPainter, QPen
from PIL import Image
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QWidget,QVBoxLayout
from PyQt5.QtCore import Qt,QBuffer,QRect
import io
import numpy as np
import torch
from torchvision import transforms
import torchvision.models as models

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1039, 589)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.LoadImage = QtWidgets.QPushButton(self.centralwidget)
        self.LoadImage.setGeometry(QtCore.QRect(20, 170, 75, 23))
        self.LoadImage.setObjectName("LoadImage")
        self.LoadVideo = QtWidgets.QPushButton(self.centralwidget)
        self.LoadVideo.setGeometry(QtCore.QRect(20, 210, 75, 23))
        self.LoadVideo.setObjectName("LoadVideo")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(140, 30, 181, 81))
        self.groupBox.setObjectName("groupBox")
        self.BackgroundSubstraction = QtWidgets.QPushButton(self.groupBox)
        self.BackgroundSubstraction.setGeometry(QtCore.QRect(20, 30, 141, 23))
        self.BackgroundSubstraction.setObjectName("BackgroundSubstraction")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(140, 140, 181, 141))
        self.groupBox_2.setObjectName("groupBox_2")
        self.Preprocessing = QtWidgets.QPushButton(self.groupBox_2)
        self.Preprocessing.setGeometry(QtCore.QRect(20, 30, 141, 23))
        self.Preprocessing.setObjectName("Preprocessing")
        self.Vediotracking = QtWidgets.QPushButton(self.groupBox_2)
        self.Vediotracking.setGeometry(QtCore.QRect(20, 90, 141, 23))
        self.Vediotracking.setObjectName("Vediotracking")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(140, 310, 181, 81))
        self.groupBox_3.setObjectName("groupBox_3")
        self.DimensionReduction = QtWidgets.QPushButton(self.groupBox_3)
        self.DimensionReduction.setGeometry(QtCore.QRect(20, 30, 141, 23))
        self.DimensionReduction.setObjectName("DimensionReduction")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(340, 30, 671, 251))
        self.groupBox_4.setObjectName("groupBox_4")
        self.ShowModelStructure = QtWidgets.QPushButton(self.groupBox_4)
        self.ShowModelStructure.setGeometry(QtCore.QRect(20, 30, 141, 23))
        self.ShowModelStructure.setObjectName("ShowModelStructure")
        self.ShowAccuracyandLoss = QtWidgets.QPushButton(self.groupBox_4)
        self.ShowAccuracyandLoss.setGeometry(QtCore.QRect(20, 70, 141, 23))
        self.ShowAccuracyandLoss.setObjectName("ShowAccuracyandLoss")
        self.Reset = QtWidgets.QPushButton(self.groupBox_4)
        self.Reset.setGeometry(QtCore.QRect(20, 150, 141, 23))
        self.Reset.setObjectName("Reset")
        self.Predict = QtWidgets.QPushButton(self.groupBox_4)
        self.Predict.setGeometry(QtCore.QRect(20, 110, 141, 23))
        self.Predict.setObjectName("Predict")
        self.label = QtWidgets.QLabel(self.groupBox_4)
        self.label.setGeometry(QtCore.QRect(20, 190, 151, 16))
        self.label.setObjectName("label")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_4)
        self.groupBox_6.setGeometry(QtCore.QRect(240, 70, 16, 16))
        self.groupBox_6.setObjectName("groupBox_6")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(340, 310, 671, 241))
        self.groupBox_5.setObjectName("groupBox_5")
        self.ResnetLoadImage = QtWidgets.QPushButton(self.groupBox_5)
        self.ResnetLoadImage.setGeometry(QtCore.QRect(20, 30, 141, 23))
        self.ResnetLoadImage.setObjectName("ResnetLoadImage")
        self.ShowImages = QtWidgets.QPushButton(self.groupBox_5)
        self.ShowImages.setGeometry(QtCore.QRect(20, 70, 141, 23))
        self.ShowImages.setObjectName("ShowImages")
        self.ShowComprasion = QtWidgets.QPushButton(self.groupBox_5)
        self.ShowComprasion.setGeometry(QtCore.QRect(20, 150, 141, 23))
        self.ShowComprasion.setObjectName("ShowComprasion")
        self.ShowModelStructureQ5 = QtWidgets.QPushButton(self.groupBox_5)
        self.ShowModelStructureQ5.setGeometry(QtCore.QRect(20, 110, 141, 23))
        self.ShowModelStructureQ5.setObjectName("ShowModelStructureQ5")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.groupBox_5)
        self.graphicsView_2.setGeometry(QtCore.QRect(180, 20, 481, 211))
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.Inference = QtWidgets.QPushButton(self.groupBox_5)
        self.Inference.setGeometry(QtCore.QRect(20, 190, 141, 23))
        self.Inference.setObjectName("Inference")
        self.label_2 = QtWidgets.QLabel(self.groupBox_5)
        self.label_2.setGeometry(QtCore.QRect(20, 220, 151, 16))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1039, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.groupBox_6=QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(520, 60, 481, 211))
        self.groupBox_6.setObjectName("groupBox")
        self.groupBox_6.setStyleSheet("background-color: black; color: white;")
        self.painter = Painter()
        layout = QVBoxLayout(self.groupBox_6)
        layout.addWidget(self.painter)
        # self.device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.LoadImage.setText(_translate("MainWindow", "Load Image"))
        self.LoadVideo.setText(_translate("MainWindow", "Load Video"))
        self.groupBox.setTitle(_translate("MainWindow", "1. Background Substraction"))
        self.BackgroundSubstraction.setText(_translate("MainWindow", "1. Background Substraction"))
        self.groupBox_2.setTitle(_translate("MainWindow", "2. Optical Flow"))
        self.Preprocessing.setText(_translate("MainWindow", "2.1 Preprocessing"))
        self.Vediotracking.setText(_translate("MainWindow", "2.2 Vedio tracking"))
        self.groupBox_3.setTitle(_translate("MainWindow", "3. PCA"))
        self.DimensionReduction.setText(_translate("MainWindow", "3. Dimension Reduction"))
        self.groupBox_4.setTitle(_translate("MainWindow", "4. MNIST Classifier Using VGG19"))
        self.ShowModelStructure.setText(_translate("MainWindow", "1. Show Model Structure"))
        self.ShowAccuracyandLoss.setText(_translate("MainWindow", "2. Show Accuracy and Loss"))
        self.Reset.setText(_translate("MainWindow", "4. Reset"))
        self.Predict.setText(_translate("MainWindow", "3. Predict"))
        self.label.setText(_translate("MainWindow", "Predict :"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Draw"))
        self.groupBox_5.setTitle(_translate("MainWindow", "5. ResNet50"))
        self.ResnetLoadImage.setText(_translate("MainWindow", "Load Image"))
        self.ShowImages.setText(_translate("MainWindow", "5.1 Show Images"))
        self.ShowComprasion.setText(_translate("MainWindow", "5.5 Show Comprasion"))
        self.ShowModelStructureQ5.setText(_translate("MainWindow", "5.2  Show Model Structure"))
        self.Inference.setText(_translate("MainWindow", "5.4 Inference"))
        self.label_2.setText(_translate("MainWindow", "Predict :"))

class Painter(QWidget):
    def __init__(self):
        super(Painter, self).__init__()
        self.resize(640, 260)
        self.xy = []
        self.line = []
        self.pen = QPen(Qt.white, 20, Qt.SolidLine)
    
    def paintEvent(self, QPaintEvent):
        self.painter = QPainter()
        self.painter.begin(self)
        self.painter.setPen(self.pen)

        start_x_tmp = 0
        start_y_tmp = 0

        if self.line:
            for line in range(len(self.line)):
                for point in range(1, len(self.line[line])):
                    start_x, start_y = self.line[line][point-1][0], self.line[line][point-1][1]
                    end_x, end_y = self.line[line][point][0], self.line[line][point][1]
                    self.painter.drawLine(start_x, start_y, end_x, end_y)

        for x, y in self.xy:
            if start_x_tmp == 0 and start_y_tmp == 0:
                self.painter.drawLine(self.start_xy[0][0], self.start_xy[0][1], x, y)
            else:
                self.painter.drawLine(start_x_tmp, start_y_tmp, x, y)

            start_x_tmp = x
            start_y_tmp = y

        self.painter.end()

    def mousePressEvent(self, QMouseEvent):
        self.start_xy = [(QMouseEvent.pos().x(), QMouseEvent.pos().y())]

    def mouseMoveEvent(self, QMouseEvent):
        self.xy.append((QMouseEvent.pos().x(), QMouseEvent.pos().y()))
        self.update()

    def mouseReleaseEvent(self, QMouseEvent):
        self.line.append(self.start_xy+self.xy)
        self.xy = []

    def reset_drawing(self):
        self.xy=[]
        self.line = []
        self.update()
    
    def get_canvas_image(self):
        image = self.grab(QRect(self.pos(), self.size())).toImage()
        buffer = QBuffer()
        buffer.open(QBuffer.ReadWrite)
        image.save(buffer, "PNG")
        pil_im = Image.open(io.BytesIO(buffer.data()))
        return pil_im